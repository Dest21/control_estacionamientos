@page "/cars"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Vehículos</PageTitle>

<!-- Header Section -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 font-poppins">Gestión de Vehículos</h1>
            <p class="text-gray-600 mt-2">Administra los vehículos registrados en el sistema</p>
        </div>
        <button class="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2 hover-lift" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle text-lg"></i>
            <span>Nuevo Vehículo</span>
        </button>
    </div>
</div>

<!-- Success/Error Toast -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-check-circle"></i>
            <span>@successMessage</span>
        </div>
    </div>
}

@if (showErrorToast)
{
    <div class="fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@errorMessage</span>
        </div>
    </div>
}

<!-- Search and Filters -->
<div class="bg-white rounded-2xl shadow-soft p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="md:col-span-1">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="bi bi-search text-gray-400"></i>
                </div>
                <input type="text" 
                       class="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                       placeholder="Buscar por placa, marca o modelo..." 
                       @bind="searchTerm" 
                       @onkeypress="OnSearchKeyPress" />
            </div>
        </div>
        <div class="md:col-span-1">
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedClientId" @bind:after="FilterByClient">
                <option value="">Todos los clientes</option>
                @if (allClients?.Any() == true)
                {
                    @foreach (var client in allClients)
                    {
                        <option value="@client.Id">@client.FullName</option>
                    }
                }
            </select>
        </div>
        <div class="md:col-span-1">
            <button class="w-full bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2" 
                    @onclick="SearchCars">
                <i class="bi bi-search"></i>
                <span>Buscar</span>
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="flex justify-center items-center py-20">
        <div class="relative">
            <div class="w-16 h-16 border-4 border-green-200 border-t-green-500 rounded-full animate-spin"></div>
            <div class="absolute inset-0 flex items-center justify-center">
                <i class="bi bi-car-front text-green-500 text-xl"></i>
            </div>
        </div>
    </div>
}
else if (cars?.Any() == true)
{
    <!-- Cars Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var car in cars)
        {
            <div class="bg-white rounded-2xl shadow-soft hover:shadow-medium transition-all duration-300 overflow-hidden hover-lift">
                <!-- Car Header -->
                <div class="bg-gradient-to-r from-green-50 to-blue-50 p-6 border-b border-gray-100">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg">
                                <i class="bi bi-car-front-fill text-white text-xl"></i>
                            </div>
                            <div class="flex-1">
                                <h3 class="font-bold text-gray-900 text-lg">@car.LicensePlate</h3>
                                <p class="text-gray-600 text-sm">@car.Brand @car.Model</p>
                            </div>
                        </div>
                        <div class="flex items-center">
                            @if (car.IsActive)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <div class="w-1.5 h-1.5 bg-green-400 rounded-full mr-1.5"></div>
                                    Activo
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <div class="w-1.5 h-1.5 bg-red-400 rounded-full mr-1.5"></div>
                                    Inactivo
                                </span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Car Info -->
                <div class="p-6">
                    <div class="space-y-3">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="bi bi-palette text-gray-400"></i>
                                <span class="text-gray-600 text-sm">Color:</span>
                            </div>
                            <span class="text-gray-900 font-medium">@car.Color</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="bi bi-calendar text-gray-400"></i>
                                <span class="text-gray-600 text-sm">Año:</span>
                            </div>
                            <span class="text-gray-900 font-medium">@car.Year</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <i class="bi bi-person text-gray-400"></i>
                                <span class="text-gray-600 text-sm">Propietario:</span>
                            </div>
                            <span class="text-gray-900 font-medium text-sm">@(car.Client?.FullName ?? "Sin asignar")</span>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex space-x-2 mt-6">
                        <button class="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2" 
                                @onclick="() => ShowEditModal(car)">
                            <i class="bi bi-pencil"></i>
                            <span>Editar</span>
                        </button>
                        <button class="flex-1 bg-green-50 hover:bg-green-100 text-green-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2" 
                                @onclick="() => ViewCar(car)">
                            <i class="bi bi-eye"></i>
                            <span>Ver</span>
                        </button>
                        <button class="bg-red-50 hover:bg-red-100 text-red-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center" 
                                @onclick="() => DeleteCar(car)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="text-center py-20">
        <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <i class="bi bi-car-front text-gray-400 text-4xl"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No se encontraron vehículos</h3>
        <p class="text-gray-600 mb-6">Comienza agregando el primer vehículo al sistema</p>
        <button class="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle mr-2"></i>
            Agregar Vehículo
        </button>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-green-50 to-blue-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-car-front-fill text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">@(isEditing ? "Editar Vehículo" : "Nuevo Vehículo")</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <EditForm Model="currentCar" OnValidSubmit="SaveCar">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" />

                    <div class="space-y-6">
                        <!-- License Plate and Owner Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Placa</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 uppercase" 
                                          @bind-Value="currentCar.LicensePlate" 
                                          placeholder="ABC-123" />
                                <ValidationMessage For="@(() => currentCar.LicensePlate)" class="text-red-500 text-sm mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Propietario</label>
                                <InputSelect class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                            @bind-Value="currentCar.ClientId">
                                    <option value="">Seleccionar cliente...</option>
                                    @if (allClients?.Any() == true)
                                    {
                                        @foreach (var client in allClients.Where(c => c.IsActive))
                                        {
                                            <option value="@client.Id">@client.FullName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => currentCar.ClientId)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>

                        <!-- Brand and Model Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Marca</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentCar.Brand" />
                                <ValidationMessage For="@(() => currentCar.Brand)" class="text-red-500 text-sm mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Modelo</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentCar.Model" />
                                <ValidationMessage For="@(() => currentCar.Model)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>

                        <!-- Color and Year Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Color</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentCar.Color" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Año</label>
                                <InputNumber class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                            @bind-Value="currentCar.Year" min="1900" max="@DateTime.Now.Year" />
                            </div>
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-100">
                        <button type="button" 
                                class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                                @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2" 
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            }
                            else
                            {
                                <i class="bi bi-check-circle"></i>
                            }
                            <span>@(isEditing ? "Actualizar" : "Crear")</span>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (showViewModal && selectedCarForView != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseViewModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-green-50 to-blue-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-blue-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-car-front-fill text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">Detalles del Vehículo</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseViewModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Placa</label>
                            <p class="text-2xl font-bold text-gray-900">@selectedCarForView.LicensePlate</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Marca</label>
                            <p class="text-lg text-gray-900">@selectedCarForView.Brand</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Modelo</label>
                            <p class="text-lg text-gray-900">@selectedCarForView.Model</p>
                        </div>
                    </div>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Color</label>
                            <p class="text-gray-900">@selectedCarForView.Color</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Año</label>
                            <p class="text-gray-900">@selectedCarForView.Year</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Estado</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(selectedCarForView.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                <div class="w-2 h-2 @(selectedCarForView.IsActive ? "bg-green-400" : "bg-red-400") rounded-full mr-2"></div>
                                @(selectedCarForView.IsActive ? "Activo" : "Inactivo")
                            </span>
                        </div>
                    </div>
                </div>
                <div class="mt-6">
                    <label class="block text-sm font-semibold text-gray-500 mb-2">Propietario</label>
                    <p class="text-lg text-gray-900">@(selectedCarForView.Client?.FullName ?? "Sin propietario asignado")</p>
                    @if (selectedCarForView.Client != null)
                    {
                        <p class="text-gray-600 text-sm">@selectedCarForView.Client.Email</p>
                    }
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end p-6 border-t border-gray-100">
                <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200" 
                        @onclick="CloseViewModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && selectedCarForDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
            <!-- Modal Header -->
            <div class="p-6 border-b border-gray-100">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                        <i class="bi bi-exclamation-triangle text-red-600"></i>
                    </div>
                    <h2 class="text-xl font-bold text-gray-900">Confirmar Eliminación</h2>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <p class="text-gray-700 mb-4">
                    ¿Está seguro de que desea eliminar permanentemente el vehículo <strong>@selectedCarForDelete.DisplayName</strong>?
                </p>
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div class="flex items-start space-x-2">
                        <i class="bi bi-exclamation-triangle text-yellow-600 mt-0.5"></i>
                        <div class="text-sm text-yellow-800">
                            <p class="font-semibold">Advertencia:</p>
                            <p>Esta acción no se puede deshacer. El vehículo será eliminado permanentemente del sistema.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end space-x-3 p-6 border-t border-gray-100">
                <button class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                        @onclick="CancelDelete">
                    Cancelar
                </button>
                <button class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2" 
                        @onclick="ConfirmDelete" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    }
                    else
                    {
                        <i class="bi bi-trash"></i>
                    }
                    <span>Eliminar</span>
                </button>
            </div>
        </div>
    </div>
}

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<Car>? cars;
    private List<Client>? allClients;
    private Car currentCar = new();
    private Car? selectedCarForView;
    private Car? selectedCarForDelete;
    private string searchTerm = "";
    private string selectedClientId = "";
    private bool showModal = false;
    private bool showViewModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isDeleting = false;
    private bool showSuccessToast = false;
    private bool showErrorToast = false;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await LoadCars();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showSuccessToast || showErrorToast)
        {
            await Task.Delay(3000);
            showSuccessToast = false;
            showErrorToast = false;
            StateHasChanged();
        }
    }

    private async Task LoadClients()
    {
        allClients = await DbContext.Clients
            .Where(c => c.IsActive)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();
    }

    private async Task LoadCars()
    {
        isLoading = true;
        try
        {
            var query = DbContext.Cars.Include(c => c.Client).AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(c => c.LicensePlate.Contains(searchTerm) ||
                                        c.Brand.Contains(searchTerm) ||
                                        c.Model.Contains(searchTerm) ||
                                        c.Color.Contains(searchTerm));
            }

            if (!string.IsNullOrEmpty(selectedClientId) && int.TryParse(selectedClientId, out int clientId))
            {
                query = query.Where(c => c.ClientId == clientId);
            }

            cars = await query.OrderBy(c => c.LicensePlate).ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCars()
    {
        await LoadCars();
    }

    private async Task FilterByClient()
    {
        await LoadCars();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCars();
        }
    }

    private void ShowCreateModal()
    {
        currentCar = new Car { Year = DateTime.Now.Year };
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(Car car)
    {
        currentCar = new Car
        {
            Id = car.Id,
            LicensePlate = car.LicensePlate,
            Brand = car.Brand,
            Model = car.Model,
            Color = car.Color,
            Year = car.Year,
            ClientId = car.ClientId,
            IsActive = car.IsActive
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCar = new();
    }

    private void ViewCar(Car car)
    {
        selectedCarForView = car;
        showViewModal = true;
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        selectedCarForView = null;
    }

    private void DeleteCar(Car car)
    {
        selectedCarForDelete = car;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        selectedCarForDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (selectedCarForDelete != null)
        {
            isDeleting = true;
            try
            {
                // Check if car has active assignments
                var hasActiveAssignments = await DbContext.ParkingAssignments
                    .AnyAsync(pa => pa.CarId == selectedCarForDelete.Id && pa.IsActive);

                if (hasActiveAssignments)
                {
                    errorMessage = "No se puede eliminar el vehículo porque tiene asignaciones activas.";
                    showErrorToast = true;
                    showDeleteModal = false;
                    return;
}

                DbContext.Cars.Remove(selectedCarForDelete);
                await DbContext.SaveChangesAsync();
                await LoadCars();
                
                successMessage = "Vehículo eliminado exitosamente.";
                showSuccessToast = true;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar el vehículo: {ex.Message}";
                showErrorToast = true;
            }
            finally
            {
                isDeleting = false;
                showDeleteModal = false;
                selectedCarForDelete = null;
            }
        }
    }

    private async Task SaveCar()
    {
        isSaving = true;
        try
        {
            // Convert license plate to uppercase
            currentCar.LicensePlate = currentCar.LicensePlate?.ToUpper() ?? "";

            if (isEditing)
            {
                var existingCar = await DbContext.Cars.FindAsync(currentCar.Id);
                if (existingCar != null)
                {
                    existingCar.LicensePlate = currentCar.LicensePlate;
                    existingCar.Brand = currentCar.Brand;
                    existingCar.Model = currentCar.Model;
                    existingCar.Color = currentCar.Color;
                    existingCar.Year = currentCar.Year;
                    existingCar.ClientId = currentCar.ClientId;
                }
                successMessage = "Vehículo actualizado exitosamente.";
            }
            else
            {
                DbContext.Cars.Add(currentCar);
                successMessage = "Vehículo creado exitosamente.";
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadCars();
            showSuccessToast = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            showErrorToast = true;
        }
        finally
        {
            isSaving = false;
        }
    }
}