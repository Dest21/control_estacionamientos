@page "/cars"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Autos</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-5">Gestión de Autos</h1>
            <p class="lead">Administra los vehículos registrados en el sistema</p>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar por placa, marca o modelo..." 
                       @bind="searchTerm" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchCars">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedClientId" @bind:after="FilterByClient">
                <option value="">Todos los clientes</option>
                @if (allClients?.Any() == true)
                {
                    @foreach (var client in allClients)
                    {
                        <option value="@client.Id">@client.FullName</option>
                    }
                }
            </select>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i> Nuevo Auto
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (cars?.Any() == true)
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Placa</th>
                                <th>Marca</th>
                                <th>Modelo</th>
                                <th>Color</th>
                                <th>Año</th>
                                <th>Propietario</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var car in cars)
                            {
                                <tr>
                                    <td><strong>@car.LicensePlate</strong></td>
                                    <td>@car.Brand</td>
                                    <td>@car.Model</td>
                                    <td>@car.Color</td>
                                    <td>@car.Year</td>
                                    <td>@car.Client?.FullName</td>
                                    <td>
                                        <span class="badge bg-@(car.IsActive ? "success" : "danger")">
                                            @(car.IsActive ? "Activo" : "Inactivo")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(car)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ViewCar(car)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            @if (car.IsActive)
                                            {
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeactivateCar(car)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No se encontraron autos.
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Auto" : "Nuevo Auto")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentCar" OnValidSubmit="SaveCar">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Placa</label>
                                    <InputText class="form-control" @bind-Value="currentCar.LicensePlate" 
                                               placeholder="ABC-123" style="text-transform: uppercase;" />
                                    <ValidationMessage For="@(() => currentCar.LicensePlate)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Propietario</label>
                                    <InputSelect class="form-select" @bind-Value="currentCar.ClientId">
                                        <option value="">Seleccionar cliente...</option>
                                        @if (allClients?.Any() == true)
                                        {
                                            @foreach (var client in allClients.Where(c => c.IsActive))
                                            {
                                                <option value="@client.Id">@client.FullName</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentCar.ClientId)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Marca</label>
                                    <InputText class="form-control" @bind-Value="currentCar.Brand" />
                                    <ValidationMessage For="@(() => currentCar.Brand)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Modelo</label>
                                    <InputText class="form-control" @bind-Value="currentCar.Model" />
                                    <ValidationMessage For="@(() => currentCar.Model)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Color</label>
                                    <InputText class="form-control" @bind-Value="currentCar.Color" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Año</label>
                                    <InputNumber class="form-control" @bind-Value="currentCar.Year" min="1900" max="@DateTime.Now.Year" />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditing ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Car>? cars;
    private List<Client>? allClients;
    private Car currentCar = new();
    private string searchTerm = "";
    private string selectedClientId = "";
    private bool showModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await LoadCars();
    }

    private async Task LoadClients()
    {
        allClients = await DbContext.Clients
            .Where(c => c.IsActive)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();
    }

    private async Task LoadCars()
    {
        isLoading = true;
        try
        {
            var query = DbContext.Cars.Include(c => c.Client).AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(c => c.LicensePlate.Contains(searchTerm) ||
                                        c.Brand.Contains(searchTerm) ||
                                        c.Model.Contains(searchTerm) ||
                                        c.Color.Contains(searchTerm));
            }

            if (!string.IsNullOrEmpty(selectedClientId) && int.TryParse(selectedClientId, out int clientId))
            {
                query = query.Where(c => c.ClientId == clientId);
            }

            cars = await query.OrderBy(c => c.LicensePlate).ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCars()
    {
        await LoadCars();
    }

    private async Task FilterByClient()
    {
        await LoadCars();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCars();
        }
    }

    private void ShowCreateModal()
    {
        currentCar = new Car { Year = DateTime.Now.Year };
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(Car car)
    {
        currentCar = new Car
        {
            Id = car.Id,
            LicensePlate = car.LicensePlate,
            Brand = car.Brand,
            Model = car.Model,
            Color = car.Color,
            Year = car.Year,
            ClientId = car.ClientId,
            IsActive = car.IsActive
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCar = new();
    }

    private async Task SaveCar()
    {
        isSaving = true;
        try
        {
            // Convert license plate to uppercase
            currentCar.LicensePlate = currentCar.LicensePlate?.ToUpper() ?? "";

            if (isEditing)
            {
                var existingCar = await DbContext.Cars.FindAsync(currentCar.Id);
                if (existingCar != null)
                {
                    existingCar.LicensePlate = currentCar.LicensePlate;
                    existingCar.Brand = currentCar.Brand;
                    existingCar.Model = currentCar.Model;
                    existingCar.Color = currentCar.Color;
                    existingCar.Year = currentCar.Year;
                    existingCar.ClientId = currentCar.ClientId;
                }
            }
            else
            {
                DbContext.Cars.Add(currentCar);
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadCars();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ViewCar(Car car)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Ver detalles de: {car.DisplayName}");
    }

    private async Task DeactivateCar(Car car)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"¿Está seguro de desactivar el auto {car.DisplayName}?");
        
        if (confirmed)
        {
            car.IsActive = false;
            await DbContext.SaveChangesAsync();
            await LoadCars();
        }
    }
}