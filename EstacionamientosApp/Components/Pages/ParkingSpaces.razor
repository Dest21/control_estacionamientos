@page "/parking-spaces"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Espacios</PageTitle>

<!-- Header Section -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 font-poppins">Gestión de Espacios</h1>
            <p class="text-gray-600 mt-2">Administra los espacios de estacionamiento del sistema</p>
        </div>
        <button class="bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2 hover-lift" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle text-lg"></i>
            <span>Nuevo Espacio</span>
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Total Spaces -->
    <div class="bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@totalSpaces</h3>
                <p class="text-green-100 font-medium">Total Espacios</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-grid-3x3-gap text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Available Spaces -->
    <div class="bg-gradient-to-r from-blue-500 to-cyan-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@availableSpaces</h3>
                <p class="text-blue-100 font-medium">Disponibles</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-check-circle text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Occupied Spaces -->
    <div class="bg-gradient-to-r from-orange-500 to-red-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@occupiedSpaces</h3>
                <p class="text-orange-100 font-medium">Ocupados</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-car-front text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Zones -->
    <div class="bg-gradient-to-r from-purple-500 to-pink-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@(zones?.Count ?? 0)</h3>
                <p class="text-purple-100 font-medium">Zonas</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-geo-alt text-2xl"></i>
            </div>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="bg-white rounded-2xl shadow-soft p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Buscar</label>
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="bi bi-search text-gray-400"></i>
                </div>
                <input type="text" 
                       class="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                       placeholder="Número de espacio..." 
                       @bind="searchTerm" 
                       @onkeypress="OnSearchKeyPress" />
            </div>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Zona</label>
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedZone" @bind:after="FilterSpaces">
                <option value="">Todas las zonas</option>
                @if (zones?.Any() == true)
                {
                    @foreach (var zone in zones)
                    {
                        <option value="@zone">@zone</option>
                    }
                }
            </select>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo</label>
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedType" @bind:after="FilterSpaces">
                <option value="">Todos los tipos</option>
                <option value="Regular">Regular</option>
                <option value="Compact">Compacto</option>
                <option value="VIP">VIP</option>
                <option value="Disabled">Discapacitados</option>
            </select>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedAvailability" @bind:after="FilterSpaces">
                <option value="">Todos</option>
                <option value="true">Disponibles</option>
                <option value="false">Ocupados</option>
            </select>
        </div>
    </div>
    <div class="flex justify-end space-x-3">
        <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2" 
                @onclick="ClearFilters">
            <i class="bi bi-arrow-clockwise"></i>
            <span>Limpiar</span>
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="flex justify-center items-center py-20">
        <div class="relative">
            <div class="w-16 h-16 border-4 border-yellow-200 border-t-yellow-500 rounded-full animate-spin"></div>
            <div class="absolute inset-0 flex items-center justify-center">
                <i class="bi bi-grid-3x3-gap text-yellow-500 text-xl"></i>
            </div>
        </div>
    </div>
}
else if (parkingSpaces?.Any() == true)
{
    <!-- Parking Spaces Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
        @foreach (var space in parkingSpaces)
        {
            <div class="bg-white rounded-2xl shadow-soft hover:shadow-medium transition-all duration-300 overflow-hidden hover-lift @(space.IsAvailable ? "border-l-4 border-green-500" : "border-l-4 border-red-500")">
                <!-- Space Header -->
                <div class="@(space.IsAvailable ? "bg-gradient-to-r from-green-50 to-emerald-50" : "bg-gradient-to-r from-red-50 to-orange-50") p-4 text-center">
                    <div class="w-12 h-12 @(space.IsAvailable ? "bg-green-500" : "bg-red-500") rounded-xl flex items-center justify-center mx-auto mb-2 shadow-lg">
                        <i class="bi bi-@(GetSpaceIcon(space.SpaceType)) text-white text-xl"></i>
                    </div>
                    <h3 class="font-bold text-gray-900 text-lg">@space.SpaceNumber</h3>
                    <p class="text-gray-600 text-sm">@space.Zone</p>
                </div>

                <!-- Space Info -->
                <div class="p-4">
                    <div class="space-y-2 mb-4">
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600 text-sm">Tipo:</span>
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(GetTypeColorClasses(space.SpaceType))">
                                @space.SpaceType
                            </span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600 text-sm">Estado:</span>
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(space.IsAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                <div class="w-1.5 h-1.5 @(space.IsAvailable ? "bg-green-400" : "bg-red-400") rounded-full mr-1.5"></div>
                                @(space.IsAvailable ? "Disponible" : "Ocupado")
                            </span>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(space.Description))
                    {
                        <div class="mb-4">
                            <p class="text-gray-600 text-xs">@space.Description</p>
                        </div>
                    }

                    <!-- Actions -->
                    <div class="flex space-x-1">
                        <button class="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 py-2 px-2 rounded-lg font-medium transition-all duration-200 flex items-center justify-center" 
                                @onclick="() => ShowEditModal(space)">
                            <i class="bi bi-pencil text-sm"></i>
                        </button>
                        <button class="flex-1 bg-green-50 hover:bg-green-100 text-green-600 py-2 px-2 rounded-lg font-medium transition-all duration-200 flex items-center justify-center"
                                @onclick="() => ShowViewModal(space)">
                            <i class="bi bi-eye text-sm"></i>
                        </button>
                        @if (space.IsActive && space.IsAvailable)
                        {
                            <button class="bg-red-50 hover:bg-red-100 text-red-600 py-2 px-2 rounded-lg font-medium transition-all duration-200 flex items-center justify-center"
                                    @onclick="() => ShowDeleteConfirmation(space)">
                                <i class="bi bi-trash text-sm"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="text-center py-20">
        <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <i class="bi bi-grid-3x3-gap text-gray-400 text-4xl"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No se encontraron espacios</h3>
        <p class="text-gray-600 mb-6">Intenta ajustar los filtros o crear un nuevo espacio</p>
        <button class="bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle mr-2"></i>
            Agregar Espacio
        </button>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-yellow-50 to-orange-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-@(isEditing ? "pencil" : "plus-circle") text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">@(isEditing ? "Editar Espacio" : "Nuevo Espacio")</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <EditForm Model="currentSpace" OnValidSubmit="SaveSpace">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" />

                    <div class="space-y-6">
                        <!-- Space Number and Zone Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Número de Espacio</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentSpace.SpaceNumber" 
                                          placeholder="Ej: A01, B15, C03" />
                                <ValidationMessage For="@(() => currentSpace.SpaceNumber)" class="text-red-500 text-sm mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Zona</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentSpace.Zone" 
                                          placeholder="Ej: Zona A, Zona B" />
                            </div>
                        </div>

                        <!-- Type and Availability Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo de Espacio</label>
                                <InputSelect class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                                            @bind-Value="currentSpace.SpaceType">
                                    <option value="Regular">Regular</option>
                                    <option value="Compact">Compacto</option>
                                    <option value="VIP">VIP</option>
                                    <option value="Disabled">Discapacitados</option>
                                </InputSelect>
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
                                <div class="flex items-center h-12">
                                    <label class="inline-flex items-center">
                                        <InputCheckbox class="form-checkbox h-5 w-5 text-yellow-500 rounded focus:ring-yellow-500 focus:ring-2" 
                                                      @bind-Value="currentSpace.IsAvailable" />
                                        <span class="ml-2 text-gray-700">Disponible</span>
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Description -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Descripción</label>
                            <InputTextArea class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200" 
                                          rows="3" @bind-Value="currentSpace.Description" 
                                          placeholder="Descripción opcional del espacio..." />
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-100">
                        <button type="button" 
                                class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                                @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2" 
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            }
                            else
                            {
                                <i class="bi bi-@(isEditing ? "check-circle" : "plus-circle")"></i>
                            }
                            <span>@(isEditing ? "Actualizar" : "Crear")</span>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Success/Error Toast -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-check-circle"></i>
            <span>@successMessage</span>
        </div>
    </div>
}

@if (showErrorToast)
{
    <div class="fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@errorMessage</span>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (showViewModal && selectedSpaceForView != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseViewModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-yellow-50 to-orange-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-grid-3x3-gap text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">Detalles del Espacio</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseViewModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Número de Espacio</label>
                            <p class="text-2xl font-bold text-gray-900">@selectedSpaceForView.SpaceNumber</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Zona</label>
                            <p class="text-lg text-gray-900">@selectedSpaceForView.Zone</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Tipo</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(GetTypeColorClasses(selectedSpaceForView.SpaceType))">
                                @selectedSpaceForView.SpaceType
                            </span>
                        </div>
                    </div>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Estado</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(selectedSpaceForView.IsAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                <div class="w-2 h-2 @(selectedSpaceForView.IsAvailable ? "bg-green-400" : "bg-red-400") rounded-full mr-2"></div>
                                @(selectedSpaceForView.IsAvailable ? "Disponible" : "Ocupado")
                            </span>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Estado del Sistema</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(selectedSpaceForView.IsActive ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800")">
                                @(selectedSpaceForView.IsActive ? "Activo" : "Inactivo")
                            </span>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(selectedSpaceForView.Description))
                {
                    <div class="mt-6">
                        <label class="block text-sm font-semibold text-gray-500 mb-2">Descripción</label>
                        <p class="text-gray-900 bg-gray-50 p-4 rounded-lg">@selectedSpaceForView.Description</p>
                    </div>
                }
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end p-6 border-t border-gray-100">
                <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200"
                        @onclick="CloseViewModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && selectedSpaceForDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
            <!-- Modal Header -->
            <div class="p-6 border-b border-gray-100">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                        <i class="bi bi-exclamation-triangle text-red-600"></i>
                    </div>
                    <h2 class="text-xl font-bold text-gray-900">Confirmar Eliminación</h2>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <p class="text-gray-700 mb-4">
                    ¿Está seguro de que desea eliminar permanentemente el espacio <strong>@selectedSpaceForDelete.SpaceNumber</strong>?
                </p>
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div class="flex items-start space-x-2">
                        <i class="bi bi-exclamation-triangle text-yellow-600 mt-0.5"></i>
                        <div class="text-sm text-yellow-800">
                            <p class="font-semibold">Advertencia:</p>
                            <p>Esta acción no se puede deshacer. El espacio será eliminado permanentemente del sistema.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end space-x-3 p-6 border-t border-gray-100">
                <button class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200"
                        @onclick="CancelDelete">
                    Cancelar
                </button>
                <button class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2"
                        @onclick="ConfirmDelete" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    }
                    else
                    {
                        <i class="bi bi-trash"></i>
                    }
                    <span>Eliminar</span>
                </button>
            </div>
        </div>
    </div>
}

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<ParkingSpace>? parkingSpaces;
    private List<string>? zones;
    private ParkingSpace currentSpace = new();
    private ParkingSpace? selectedSpaceForView;
    private ParkingSpace? selectedSpaceForDelete;
    private string searchTerm = "";
    private string selectedZone = "";
    private string selectedType = "";
    private string selectedAvailability = "";
    private bool showModal = false;
    private bool showViewModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isDeleting = false;
    private bool showSuccessToast = false;
    private bool showErrorToast = false;
    private string successMessage = "";
    private string errorMessage = "";

    private int totalSpaces;
    private int availableSpaces;
    private int occupiedSpaces;

    protected override async Task OnInitializedAsync()
    {
        await LoadZones();
        await LoadSpaces();
        await LoadStatistics();
    }

    private async Task LoadZones()
    {
        zones = await DbContext.ParkingSpaces
            .Where(ps => ps.IsActive && !string.IsNullOrEmpty(ps.Zone))
            .Select(ps => ps.Zone!)
            .Distinct()
            .OrderBy(z => z)
            .ToListAsync();
    }

    private async Task LoadStatistics()
    {
        totalSpaces = await DbContext.ParkingSpaces.CountAsync(ps => ps.IsActive);
        availableSpaces = await DbContext.ParkingSpaces.CountAsync(ps => ps.IsActive && ps.IsAvailable);
        occupiedSpaces = totalSpaces - availableSpaces;
    }

    private async Task LoadSpaces()
    {
        isLoading = true;
        try
        {
            var query = DbContext.ParkingSpaces.Where(ps => ps.IsActive).AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(ps => ps.SpaceNumber.Contains(searchTerm) ||
                                         ps.Zone!.Contains(searchTerm) ||
                                         ps.Description!.Contains(searchTerm));
            }

            if (!string.IsNullOrEmpty(selectedZone))
            {
                query = query.Where(ps => ps.Zone == selectedZone);
            }

            if (!string.IsNullOrEmpty(selectedType))
            {
                query = query.Where(ps => ps.SpaceType == selectedType);
            }

            if (!string.IsNullOrEmpty(selectedAvailability))
            {
                var isAvailable = bool.Parse(selectedAvailability);
                query = query.Where(ps => ps.IsAvailable == isAvailable);
            }

            parkingSpaces = await query
                .OrderBy(ps => ps.Zone)
                .ThenBy(ps => ps.SpaceNumber)
                .ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterSpaces()
    {
        await LoadSpaces();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadSpaces();
        }
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedZone = "";
        selectedType = "";
        selectedAvailability = "";
        await LoadSpaces();
    }

    private void ShowCreateModal()
    {
        currentSpace = new ParkingSpace { IsAvailable = true, IsActive = true };
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(ParkingSpace space)
    {
        currentSpace = new ParkingSpace
        {
            Id = space.Id,
            SpaceNumber = space.SpaceNumber,
            Zone = space.Zone,
            SpaceType = space.SpaceType,
            IsAvailable = space.IsAvailable,
            IsActive = space.IsActive,
            Description = space.Description
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentSpace = new();
    }

    private async Task SaveSpace()
    {
        isSaving = true;
        try
        {
            if (isEditing)
            {
                var existingSpace = await DbContext.ParkingSpaces.FindAsync(currentSpace.Id);
                if (existingSpace != null)
                {
                    existingSpace.SpaceNumber = currentSpace.SpaceNumber;
                    existingSpace.Zone = currentSpace.Zone;
                    existingSpace.SpaceType = currentSpace.SpaceType;
                    existingSpace.IsAvailable = currentSpace.IsAvailable;
                    existingSpace.Description = currentSpace.Description;
                }
            }
            else
            {
                DbContext.ParkingSpaces.Add(currentSpace);
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadSpaces();
            await LoadStatistics();
            
            successMessage = isEditing ? "Espacio actualizado exitosamente." : "Espacio creado exitosamente.";
            showSuccessToast = true;
            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showSuccessToast = false; StateHasChanged(); }));
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            showErrorToast = true;
            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ShowViewModal(ParkingSpace space)
    {
        selectedSpaceForView = space;
        showViewModal = true;
    }

    private void ShowDeleteConfirmation(ParkingSpace space)
    {
        selectedSpaceForDelete = space;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        selectedSpaceForDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (selectedSpaceForDelete != null)
        {
            isDeleting = true;
            try
            {
                // Check if space has active assignments
                var hasActiveAssignments = await DbContext.ParkingAssignments
                    .AnyAsync(pa => pa.ParkingSpaceId == selectedSpaceForDelete.Id && pa.IsActive);

                if (hasActiveAssignments)
                {
                    errorMessage = "No se puede eliminar el espacio porque tiene asignaciones activas.";
                    showErrorToast = true;
                    showDeleteModal = false;
                    _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
                    return;
                }

                DbContext.ParkingSpaces.Remove(selectedSpaceForDelete);
                await DbContext.SaveChangesAsync();
                await LoadSpaces();
                await LoadStatistics();
                
                successMessage = "Espacio eliminado exitosamente.";
                showSuccessToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showSuccessToast = false; StateHasChanged(); }));
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar el espacio: {ex.Message}";
                showErrorToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
            }
            finally
            {
                isDeleting = false;
                showDeleteModal = false;
                selectedSpaceForDelete = null;
            }
        }
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        selectedSpaceForView = null;
    }

    private string GetSpaceIcon(string spaceType) => spaceType switch
    {
        "VIP" => "star-fill",
        "Disabled" => "person-wheelchair",
        "Compact" => "car-front",
        _ => "square"
    };

    private string GetTypeColorClasses(string spaceType) => spaceType switch
    {
        "VIP" => "bg-yellow-100 text-yellow-800",
        "Disabled" => "bg-blue-100 text-blue-800",
        "Compact" => "bg-gray-100 text-gray-800",
        _ => "bg-purple-100 text-purple-800"
    };
}