@page "/clients"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Clientes</PageTitle>

<!-- Header Section -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 font-poppins">Gestión de Clientes</h1>
            <p class="text-gray-600 mt-2">Administra los clientes del sistema de estacionamiento</p>
        </div>
        <button class="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2 hover-lift" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle text-lg"></i>
            <span>Nuevo Cliente</span>
        </button>
    </div>
</div>

<!-- Success/Error Toast -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-check-circle"></i>
            <span>@successMessage</span>
        </div>
    </div>
}

@if (showErrorToast)
{
    <div class="fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@errorMessage</span>
        </div>
    </div>
}

<!-- Search and Filters -->
<div class="bg-white rounded-2xl shadow-soft p-6 mb-8">
    <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-1">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="bi bi-search text-gray-400"></i>
                </div>
                <input type="text" 
                       class="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                       placeholder="Buscar por nombre, email o documento..." 
                       @bind="searchTerm" 
                       @onkeypress="OnSearchKeyPress" />
            </div>
        </div>
        <button class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2" 
                @onclick="SearchClients">
            <i class="bi bi-search"></i>
            <span>Buscar</span>
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="flex justify-center items-center py-20">
        <div class="relative">
            <div class="w-16 h-16 border-4 border-blue-200 border-t-blue-500 rounded-full animate-spin"></div>
            <div class="absolute inset-0 flex items-center justify-center">
                <i class="bi bi-people text-blue-500 text-xl"></i>
            </div>
        </div>
    </div>
}
else if (clients?.Any() == true)
{
    <!-- Clients Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var client in clients)
        {
            <div class="bg-white rounded-2xl shadow-soft hover:shadow-medium transition-all duration-300 overflow-hidden hover-lift">
                <!-- Client Header -->
                <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 border-b border-gray-100">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                            <i class="bi bi-person-fill text-white text-xl"></i>
                        </div>
                        <div class="flex-1">
                            <h3 class="font-bold text-gray-900 text-lg">@client.FullName</h3>
                            <p class="text-gray-600 text-sm">@client.DocumentType: @client.DocumentNumber</p>
                        </div>
                        <div class="flex items-center">
                            @if (client.IsActive)
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <div class="w-1.5 h-1.5 bg-green-400 rounded-full mr-1.5"></div>
                                    Activo
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    <div class="w-1.5 h-1.5 bg-red-400 rounded-full mr-1.5"></div>
                                    Inactivo
                                </span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Client Info -->
                <div class="p-6">
                    <div class="space-y-3">
                        <div class="flex items-center space-x-3">
                            <i class="bi bi-envelope text-gray-400"></i>
                            <span class="text-gray-700 text-sm">@client.Email</span>
                        </div>
                        <div class="flex items-center space-x-3">
                            <i class="bi bi-telephone text-gray-400"></i>
                            <span class="text-gray-700 text-sm">@(client.Phone ?? "No especificado")</span>
                        </div>
                        <div class="flex items-center space-x-3">
                            <i class="bi bi-car-front text-gray-400"></i>
                            <span class="text-gray-700 text-sm">@client.Cars.Count vehículo(s)</span>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex space-x-2 mt-6">
                        <button class="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2" 
                                @onclick="() => ShowEditModal(client)">
                            <i class="bi bi-pencil"></i>
                            <span>Editar</span>
                        </button>
                        <button class="flex-1 bg-green-50 hover:bg-green-100 text-green-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2" 
                                @onclick="() => ViewClient(client)">
                            <i class="bi bi-eye"></i>
                            <span>Ver</span>
                        </button>
                        <button class="bg-red-50 hover:bg-red-100 text-red-600 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center" 
                                @onclick="() => DeleteClient(client)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="text-center py-20">
        <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <i class="bi bi-people text-gray-400 text-4xl"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No se encontraron clientes</h3>
        <p class="text-gray-600 mb-6">Comienza agregando tu primer cliente al sistema</p>
        <button class="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle mr-2"></i>
            Agregar Cliente
        </button>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-person-plus text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">@(isEditing ? "Editar Cliente" : "Nuevo Cliente")</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <EditForm Model="currentClient" OnValidSubmit="SaveClient">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" />

                    <div class="space-y-6">
                        <!-- Names Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Nombres</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentClient.FirstName" />
                                <ValidationMessage For="@(() => currentClient.FirstName)" class="text-red-500 text-sm mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Apellidos</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentClient.LastName" />
                                <ValidationMessage For="@(() => currentClient.LastName)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>

                        <!-- Document Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Tipo de Documento</label>
                                <InputSelect class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                            @bind-Value="currentClient.DocumentType">
                                    <option value="DNI">DNI</option>
                                    <option value="Pasaporte">Pasaporte</option>
                                    <option value="Carnet de Extranjería">Carnet de Extranjería</option>
                                </InputSelect>
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Número de Documento</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentClient.DocumentNumber" />
                                <ValidationMessage For="@(() => currentClient.DocumentNumber)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>

                        <!-- Contact Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Email</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          type="email" @bind-Value="currentClient.Email" />
                                <ValidationMessage For="@(() => currentClient.Email)" class="text-red-500 text-sm mt-1" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Teléfono</label>
                                <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                          @bind-Value="currentClient.Phone" />
                            </div>
                        </div>

                        <!-- Address -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Dirección</label>
                            <InputText class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" 
                                      @bind-Value="currentClient.Address" />
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-100">
                        <button type="button" 
                                class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                                @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2" 
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            }
                            else
                            {
                                <i class="bi bi-check-circle"></i>
                            }
                            <span>@(isEditing ? "Actualizar" : "Crear")</span>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (showViewModal && selectedClientForView != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseViewModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-person-fill text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">Detalles del Cliente</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseViewModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Nombre Completo</label>
                            <p class="text-lg font-semibold text-gray-900">@selectedClientForView.FullName</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Documento</label>
                            <p class="text-gray-900">@selectedClientForView.DocumentType: @selectedClientForView.DocumentNumber</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Email</label>
                            <p class="text-gray-900">@selectedClientForView.Email</p>
                        </div>
                    </div>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Teléfono</label>
                            <p class="text-gray-900">@(selectedClientForView.Phone ?? "No especificado")</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Dirección</label>
                            <p class="text-gray-900">@(selectedClientForView.Address ?? "No especificada")</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Estado</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(selectedClientForView.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                <div class="w-2 h-2 @(selectedClientForView.IsActive ? "bg-green-400" : "bg-red-400") rounded-full mr-2"></div>
                                @(selectedClientForView.IsActive ? "Activo" : "Inactivo")
                            </span>
                        </div>
                    </div>
                </div>
                <div class="mt-6">
                    <label class="block text-sm font-semibold text-gray-500 mb-2">Vehículos Registrados</label>
                    <p class="text-gray-900">@selectedClientForView.Cars.Count vehículo(s) registrado(s)</p>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end p-6 border-t border-gray-100">
                <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200" 
                        @onclick="CloseViewModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && selectedClientForDelete != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
            <!-- Modal Header -->
            <div class="p-6 border-b border-gray-100">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                        <i class="bi bi-exclamation-triangle text-red-600"></i>
                    </div>
                    <h2 class="text-xl font-bold text-gray-900">Confirmar Eliminación</h2>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <p class="text-gray-700 mb-4">
                    ¿Está seguro de que desea eliminar permanentemente al cliente <strong>@selectedClientForDelete.FullName</strong>?
                </p>
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div class="flex items-start space-x-2">
                        <i class="bi bi-exclamation-triangle text-yellow-600 mt-0.5"></i>
                        <div class="text-sm text-yellow-800">
                            <p class="font-semibold">Advertencia:</p>
                            <p>Esta acción no se puede deshacer. El cliente será eliminado permanentemente del sistema.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end space-x-3 p-6 border-t border-gray-100">
                <button class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                        @onclick="CancelDelete">
                    Cancelar
                </button>
                <button class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2" 
                        @onclick="ConfirmDelete" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    }
                    else
                    {
                        <i class="bi bi-trash"></i>
                    }
                    <span>Eliminar</span>
                </button>
            </div>
        </div>
    </div>
}

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<Client>? clients;
    private Client currentClient = new();
    private Client? selectedClientForView;
    private Client? selectedClientForDelete;
    private string searchTerm = "";
    private bool showModal = false;
    private bool showViewModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isDeleting = false;
    private bool showSuccessToast = false;
    private bool showErrorToast = false;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showSuccessToast || showErrorToast)
        {
            await Task.Delay(3000);
            showSuccessToast = false;
            showErrorToast = false;
            StateHasChanged();
        }
    }

    private async Task LoadClients()
    {
        isLoading = true;
        try
        {
            var query = DbContext.Clients.Include(c => c.Cars).AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(c => c.FirstName.Contains(searchTerm) ||
                                        c.LastName.Contains(searchTerm) ||
                                        c.Email.Contains(searchTerm) ||
                                        c.DocumentNumber.Contains(searchTerm));
            }

            clients = await query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName).ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchClients()
    {
        await LoadClients();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchClients();
        }
    }

    private void ShowCreateModal()
    {
        currentClient = new Client();
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(Client client)
    {
        currentClient = new Client
        {
            Id = client.Id,
            FirstName = client.FirstName,
            LastName = client.LastName,
            DocumentNumber = client.DocumentNumber,
            DocumentType = client.DocumentType,
            Phone = client.Phone,
            Email = client.Email,
            Address = client.Address,
            IsActive = client.IsActive
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentClient = new();
    }

    private void ViewClient(Client client)
    {
        selectedClientForView = client;
        showViewModal = true;
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        selectedClientForView = null;
    }

    private void DeleteClient(Client client)
    {
        selectedClientForDelete = client;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        selectedClientForDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (selectedClientForDelete != null)
        {
            isDeleting = true;
            try
            {
                // Check if client has active assignments or cars
                var hasActiveAssignments = await DbContext.ParkingAssignments
                    .AnyAsync(pa => pa.ClientId == selectedClientForDelete.Id && pa.IsActive);
                
                var hasCars = await DbContext.Cars
                    .AnyAsync(c => c.ClientId == selectedClientForDelete.Id && c.IsActive);

                if (hasActiveAssignments || hasCars)
                {
                    errorMessage = "No se puede eliminar el cliente porque tiene asignaciones activas o vehículos registrados.";
                    showErrorToast = true;
                    showDeleteModal = false;
                    return;
                }

                DbContext.Clients.Remove(selectedClientForDelete);
                await DbContext.SaveChangesAsync();
                await LoadClients();
                
                successMessage = "Cliente eliminado exitosamente.";
                showSuccessToast = true;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar el cliente: {ex.Message}";
                showErrorToast = true;
            }
            finally
            {
                isDeleting = false;
                showDeleteModal = false;
                selectedClientForDelete = null;
            }
        }
    }

    private async Task SaveClient()
    {
        isSaving = true;
        try
        {
            if (isEditing)
            {
                var existingClient = await DbContext.Clients.FindAsync(currentClient.Id);
                if (existingClient != null)
                {
                    existingClient.FirstName = currentClient.FirstName;
                    existingClient.LastName = currentClient.LastName;
                    existingClient.DocumentNumber = currentClient.DocumentNumber;
                    existingClient.DocumentType = currentClient.DocumentType;
                    existingClient.Phone = currentClient.Phone;
                    existingClient.Email = currentClient.Email;
                    existingClient.Address = currentClient.Address;
                }
                successMessage = "Cliente actualizado exitosamente.";
            }
            else
            {
                DbContext.Clients.Add(currentClient);
                successMessage = "Cliente creado exitosamente.";
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadClients();
            showSuccessToast = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            showErrorToast = true;
        }
        finally
        {
            isSaving = false;
        }
    }
}