@page "/clients"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Clientes</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-5">Gestión de Clientes</h1>
            <p class="lead">Administra los clientes del sistema de estacionamiento</p>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Buscar por nombre, email o documento..." 
                       @bind="searchTerm" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchClients">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle"></i> Nuevo Cliente
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (clients?.Any() == true)
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nombre Completo</th>
                                <th>Documento</th>
                                <th>Email</th>
                                <th>Teléfono</th>
                                <th>Autos</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var client in clients)
                            {
                                <tr>
                                    <td>@client.FullName</td>
                                    <td>@client.DocumentNumber</td>
                                    <td>@client.Email</td>
                                    <td>@client.Phone</td>
                                    <td>
                                        <span class="badge bg-info">@client.Cars.Count</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(client.IsActive ? "success" : "danger")">
                                            @(client.IsActive ? "Activo" : "Inactivo")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowEditModal(client)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-info" @onclick="() => ViewClient(client)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            @if (client.IsActive)
                                            {
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeactivateClient(client)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No se encontraron clientes.
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Editar Cliente" : "Nuevo Cliente")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentClient" OnValidSubmit="SaveClient">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Nombres</label>
                                    <InputText class="form-control" @bind-Value="currentClient.FirstName" />
                                    <ValidationMessage For="@(() => currentClient.FirstName)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Apellidos</label>
                                    <InputText class="form-control" @bind-Value="currentClient.LastName" />
                                    <ValidationMessage For="@(() => currentClient.LastName)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Tipo de Documento</label>
                                    <InputSelect class="form-select" @bind-Value="currentClient.DocumentType">
                                        <option value="DNI">DNI</option>
                                        <option value="Pasaporte">Pasaporte</option>
                                        <option value="Carnet de Extranjería">Carnet de Extranjería</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Número de Documento</label>
                                    <InputText class="form-control" @bind-Value="currentClient.DocumentNumber" />
                                    <ValidationMessage For="@(() => currentClient.DocumentNumber)" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <InputText class="form-control" type="email" @bind-Value="currentClient.Email" />
                                    <ValidationMessage For="@(() => currentClient.Email)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Teléfono</label>
                                    <InputText class="form-control" @bind-Value="currentClient.Phone" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Dirección</label>
                            <InputText class="form-control" @bind-Value="currentClient.Address" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditing ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Client>? clients;
    private Client currentClient = new();
    private string searchTerm = "";
    private bool showModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        isLoading = true;
        try
        {
            var query = DbContext.Clients.Include(c => c.Cars).AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(c => c.FirstName.Contains(searchTerm) ||
                                        c.LastName.Contains(searchTerm) ||
                                        c.Email.Contains(searchTerm) ||
                                        c.DocumentNumber.Contains(searchTerm));
            }

            clients = await query.OrderBy(c => c.LastName).ThenBy(c => c.FirstName).ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchClients()
    {
        await LoadClients();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchClients();
        }
    }

    private void ShowCreateModal()
    {
        currentClient = new Client();
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(Client client)
    {
        currentClient = new Client
        {
            Id = client.Id,
            FirstName = client.FirstName,
            LastName = client.LastName,
            DocumentNumber = client.DocumentNumber,
            DocumentType = client.DocumentType,
            Phone = client.Phone,
            Email = client.Email,
            Address = client.Address,
            IsActive = client.IsActive
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentClient = new();
    }

    private async Task SaveClient()
    {
        isSaving = true;
        try
        {
            if (isEditing)
            {
                var existingClient = await DbContext.Clients.FindAsync(currentClient.Id);
                if (existingClient != null)
                {
                    existingClient.FirstName = currentClient.FirstName;
                    existingClient.LastName = currentClient.LastName;
                    existingClient.DocumentNumber = currentClient.DocumentNumber;
                    existingClient.DocumentType = currentClient.DocumentType;
                    existingClient.Phone = currentClient.Phone;
                    existingClient.Email = currentClient.Email;
                    existingClient.Address = currentClient.Address;
                }
            }
            else
            {
                DbContext.Clients.Add(currentClient);
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadClients();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ViewClient(Client client)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Ver detalles de: {client.FullName}");
    }

    private async Task DeactivateClient(Client client)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"¿Está seguro de desactivar al cliente {client.FullName}?");
        
        if (confirmed)
        {
            client.IsActive = false;
            await DbContext.SaveChangesAsync();
            await LoadClients();
        }
    }
}