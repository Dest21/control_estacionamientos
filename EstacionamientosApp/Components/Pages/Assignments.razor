@page "/assignments"
@using EstacionamientosApp.Data
@using EstacionamientosApp.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gestión de Asignaciones</PageTitle>

<!-- Header Section -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 font-poppins">Gestión de Asignaciones</h1>
            <p class="text-gray-600 mt-2">Administra las asignaciones de espacios de estacionamiento</p>
        </div>
        <button class="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2 hover-lift"
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle text-lg"></i>
            <span>Nueva Asignación</span>
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Total Assignments -->
    <div class="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@totalAssignments</h3>
                <p class="text-indigo-100 font-medium">Total Asignaciones</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-clipboard-data text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Active Assignments -->
    <div class="bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@activeAssignments</h3>
                <p class="text-green-100 font-medium">Activas</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-check-circle text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Expired Assignments -->
    <div class="bg-gradient-to-r from-orange-500 to-red-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@expiredAssignments</h3>
                <p class="text-orange-100 font-medium">Expiradas</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-clock-history text-2xl"></i>
            </div>
        </div>
    </div>

    <!-- Cancelled Assignments -->
    <div class="bg-gradient-to-r from-pink-500 to-rose-600 rounded-2xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 hover-lift">
        <div class="flex items-center justify-between">
            <div>
                <h3 class="text-3xl font-bold">@cancelledAssignments</h3>
                <p class="text-pink-100 font-medium">Canceladas</p>
            </div>
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-xl flex items-center justify-center">
                <i class="bi bi-x-circle text-2xl"></i>
            </div>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="bg-white rounded-2xl shadow-soft p-6 mb-8">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-4">
        <div class="lg:col-span-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Buscar</label>
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="bi bi-search text-gray-400"></i>
                </div>
                <input type="text" 
                       class="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200" 
                       placeholder="Cliente, auto o espacio..." 
                       @bind="searchTerm" 
                       @onkeypress="OnSearchKeyPress" />
            </div>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Cliente</label>
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedClientId" @bind:after="FilterAssignments">
                <option value="">Todos los clientes</option>
                @if (allClients?.Any() == true)
                {
                    @foreach (var client in allClients)
                    {
                        <option value="@client.Id">@client.FullName</option>
                    }
                }
            </select>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
            <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200" 
                    @bind="selectedStatus" @bind:after="FilterAssignments">
                <option value="">Todos</option>
                <option value="Active">Activo</option>
                <option value="Expired">Expirado</option>
                <option value="Cancelled">Cancelado</option>
                <option value="Suspended">Suspendido</option>
            </select>
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Fecha Desde</label>
            <input type="date" 
                   class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200" 
                   @bind="startDate" @bind:after="FilterAssignments" />
        </div>
        <div>
            <label class="block text-sm font-semibold text-gray-700 mb-2">Fecha Hasta</label>
            <input type="date" 
                   class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200" 
                   @bind="endDate" @bind:after="FilterAssignments" />
        </div>
    </div>
    <div class="flex justify-end space-x-3">
        <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2" 
                @onclick="ClearFilters">
            <i class="bi bi-arrow-clockwise"></i>
            <span>Limpiar</span>
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="flex justify-center items-center py-20">
        <div class="relative">
            <div class="w-16 h-16 border-4 border-purple-200 border-t-purple-500 rounded-full animate-spin"></div>
            <div class="absolute inset-0 flex items-center justify-center">
                <i class="bi bi-clipboard-check text-purple-500 text-xl"></i>
            </div>
        </div>
    </div>
}
else if (assignments?.Any() == true)
{
    <!-- Assignments Cards -->
    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        @foreach (var assignment in assignments)
        {
            <div class="bg-white rounded-2xl shadow-soft hover:shadow-medium transition-all duration-300 overflow-hidden hover-lift @(assignment.IsCurrentlyActive ? "border-l-4 border-green-500" : "border-l-4 border-gray-300")">
                <!-- Assignment Header -->
                <div class="@(assignment.IsCurrentlyActive ? "bg-gradient-to-r from-green-50 to-emerald-50" : "bg-gradient-to-r from-gray-50 to-gray-100") p-4">
                    <div class="flex items-center justify-between mb-3">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 @(assignment.IsCurrentlyActive ? "bg-green-500" : "bg-gray-400") rounded-lg flex items-center justify-center">
                                <i class="bi bi-@(GetStatusIcon(assignment.Status)) text-white"></i>
                            </div>
                            <div>
                                <h3 class="font-bold text-gray-900">@assignment.Client?.FullName</h3>
                                <p class="text-gray-600 text-sm">@assignment.Client?.Email</p>
                            </div>
                        </div>
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(GetStatusColorClasses(assignment.Status))">
                            @GetStatusText(assignment.Status)
                        </span>
                    </div>
                </div>

                <!-- Assignment Details -->
                <div class="p-4 space-y-4">
                    <!-- Vehicle Info -->
                    <div class="flex items-center space-x-3 p-3 bg-blue-50 rounded-xl">
                        <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                            <i class="bi bi-car-front text-white text-sm"></i>
                        </div>
                        <div>
                            <p class="font-semibold text-gray-900">@assignment.Car?.LicensePlate</p>
                            <p class="text-gray-600 text-sm">@assignment.Car?.Brand @assignment.Car?.Model</p>
                        </div>
                    </div>

                    <!-- Parking Space Info -->
                    <div class="flex items-center space-x-3 p-3 bg-yellow-50 rounded-xl">
                        <div class="w-8 h-8 bg-yellow-500 rounded-lg flex items-center justify-center">
                            <i class="bi bi-geo-alt text-white text-sm"></i>
                        </div>
                        <div>
                            <p class="font-semibold text-gray-900">@assignment.ParkingSpace?.SpaceNumber</p>
                            <p class="text-gray-600 text-sm">@assignment.ParkingSpace?.Zone</p>
                        </div>
                    </div>

                    <!-- Date Info -->
                    <div class="grid grid-cols-2 gap-3">
                        <div class="text-center p-3 bg-gray-50 rounded-xl">
                            <p class="text-gray-600 text-xs">Asignado</p>
                            <p class="font-semibold text-gray-900">@assignment.AssignedDate.ToString("dd/MM/yyyy")</p>
                            <p class="text-gray-500 text-xs">@assignment.AssignedDate.ToString("HH:mm")</p>
                        </div>
                        <div class="text-center p-3 bg-gray-50 rounded-xl">
                            <p class="text-gray-600 text-xs">Vigencia</p>
                            @if (assignment.StartDate.HasValue && assignment.EndDate.HasValue)
                            {
                                <p class="font-semibold text-gray-900">@assignment.EndDate.Value.ToString("dd/MM/yyyy")</p>
                                <p class="text-gray-500 text-xs">@assignment.EndDate.Value.ToString("HH:mm")</p>
                            }
                            else
                            {
                                <p class="font-semibold text-gray-900">Sin límite</p>
                                <p class="text-gray-500 text-xs">Permanente</p>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(assignment.Notes))
                    {
                        <div class="p-3 bg-purple-50 rounded-xl">
                            <p class="text-gray-600 text-xs mb-1">Notas:</p>
                            <p class="text-gray-800 text-sm">@assignment.Notes</p>
                        </div>
                    }
                </div>

                <!-- Actions -->
                <div class="p-4 bg-gray-50 flex space-x-2">
                    <button class="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 py-2 px-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-1" 
                            @onclick="() => ShowEditModal(assignment)">
                        <i class="bi bi-pencil text-sm"></i>
                        <span class="text-xs">Editar</span>
                    </button>
                    <button class="flex-1 bg-green-50 hover:bg-green-100 text-green-600 py-2 px-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-1"
                            @onclick="() => ShowViewModal(assignment)">
                        <i class="bi bi-eye text-sm"></i>
                        <span class="text-xs">Ver</span>
                    </button>
                    @if (assignment.Status == "Active")
                    {
                        <button class="bg-red-50 hover:bg-red-100 text-red-600 py-2 px-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center"
                                @onclick="() => ShowRevokeConfirmation(assignment)">
                            <i class="bi bi-x-circle text-sm"></i>
                        </button>
                    }
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="text-center py-20">
        <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <i class="bi bi-clipboard-x text-gray-400 text-4xl"></i>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No se encontraron asignaciones</h3>
        <p class="text-gray-600 mb-6">Intenta ajustar los filtros o crear una nueva asignación</p>
        <button class="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300" 
                @onclick="ShowCreateModal">
            <i class="bi bi-plus-circle mr-2"></i>
            Crear Asignación
        </button>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-purple-50 to-pink-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-@(isEditing ? "pencil" : "plus-circle") text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">@(isEditing ? "Editar Asignación" : "Nueva Asignación")</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <EditForm Model="currentAssignment" OnValidSubmit="SaveAssignment">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" />

                    <div class="space-y-6">
                        <!-- Client and Vehicle Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Cliente</label>
                                <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                        value="@currentAssignment.ClientId" @onchange="OnClientChangedEvent">
                                    <option value="0">Seleccionar cliente...</option>
                                    @if (allClients?.Any() == true)
                                    {
                                        @foreach (var client in allClients.Where(c => c.IsActive))
                                        {
                                            <option value="@client.Id">@client.FullName</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Vehículo</label>
                                <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                        @bind="currentAssignment.CarId">
                                    <option value="0">Seleccionar vehículo...</option>
                                    @if (clientCars?.Any() == true)
                                    {
                                        @foreach (var car in clientCars)
                                        {
                                            <option value="@car.Id">@car.DisplayName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Parking Space and Status Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Espacio de Estacionamiento</label>
                                <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                        @bind="currentAssignment.ParkingSpaceId">
                                    <option value="0">Seleccionar espacio...</option>
                                    @if (availableSpaces?.Any() == true)
                                    {
                                        @foreach (var space in availableSpaces)
                                        {
                                            <option value="@space.Id">@space.DisplayName (@space.SpaceType)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Estado</label>
                                <select class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                        @bind="currentAssignment.Status">
                                    <option value="Active">Activo</option>
                                    <option value="Suspended">Suspendido</option>
                                    <option value="Cancelled">Cancelado</option>
                                </select>
                            </div>
                        </div>

                        <!-- Date Range Row -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Fecha y Hora de Inicio</label>
                                <input type="datetime-local" class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                       @bind="currentAssignment.StartDate" />
                            </div>
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Fecha y Hora de Fin</label>
                                <input type="datetime-local" class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                       @bind="currentAssignment.EndDate" />
                            </div>
                        </div>

                        <!-- Notes -->
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Notas</label>
                            <textarea class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                                      rows="3" @bind="currentAssignment.Notes"
                                      placeholder="Notas adicionales sobre la asignación..."></textarea>
                        </div>
                    </div>

                    <!-- Modal Footer -->
                    <div class="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-100">
                        <button type="button" 
                                class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200" 
                                @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" 
                                class="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2" 
                                disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            }
                            else
                            {
                                <i class="bi bi-@(isEditing ? "check-circle" : "plus-circle")"></i>
                            }
                            <span>@(isEditing ? "Actualizar" : "Crear")</span>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Success/Error Toast -->
@if (showSuccessToast)
{
    <div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-check-circle"></i>
            <span>@successMessage</span>
        </div>
    </div>
}

@if (showErrorToast)
{
    <div class="fixed top-4 right-4 bg-red-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-fade-in">
        <div class="flex items-center space-x-2">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@errorMessage</span>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (showViewModal && selectedAssignmentForView != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50" @onclick="CloseViewModal">
        <div class="bg-white rounded-2xl shadow-2xl max-w-3xl w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="bg-gradient-to-r from-purple-50 to-pink-50 p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                            <i class="bi bi-clipboard-data text-white"></i>
                        </div>
                        <h2 class="text-2xl font-bold text-gray-900">Detalles de la Asignación</h2>
                    </div>
                    <button class="text-gray-400 hover:text-gray-600 transition-colors duration-200" @onclick="CloseViewModal">
                        <i class="bi bi-x-lg text-xl"></i>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Client Information -->
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Cliente</label>
                            <p class="text-xl font-bold text-gray-900">@selectedAssignmentForView.Client?.FullName</p>
                            <p class="text-gray-600">@selectedAssignmentForView.Client?.Email</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Vehículo</label>
                            <p class="text-lg font-semibold text-gray-900">@selectedAssignmentForView.Car?.LicensePlate</p>
                            <p class="text-gray-600">@selectedAssignmentForView.Car?.Brand @selectedAssignmentForView.Car?.Model</p>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Espacio</label>
                            <p class="text-lg font-semibold text-gray-900">@selectedAssignmentForView.ParkingSpace?.SpaceNumber</p>
                            <p class="text-gray-600">@selectedAssignmentForView.ParkingSpace?.Zone - @selectedAssignmentForView.ParkingSpace?.SpaceType</p>
                        </div>
                    </div>
                    
                    <!-- Assignment Information -->
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Estado</label>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(GetStatusColorClasses(selectedAssignmentForView.Status))">
                                @GetStatusText(selectedAssignmentForView.Status)
                            </span>
                        </div>
                        <div>
                            <label class="block text-sm font-semibold text-gray-500 mb-1">Fecha de Asignación</label>
                            <p class="text-lg text-gray-900">@selectedAssignmentForView.AssignedDate.ToString("dd/MM/yyyy HH:mm")</p>
                        </div>
                        @if (selectedAssignmentForView.StartDate.HasValue)
                        {
                            <div>
                                <label class="block text-sm font-semibold text-gray-500 mb-1">Fecha y Hora de Inicio</label>
                                <p class="text-lg text-gray-900">@selectedAssignmentForView.StartDate.Value.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                        }
                        @if (selectedAssignmentForView.EndDate.HasValue)
                        {
                            <div>
                                <label class="block text-sm font-semibold text-gray-500 mb-1">Fecha y Hora de Fin</label>
                                <p class="text-lg text-gray-900">@selectedAssignmentForView.EndDate.Value.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                        }
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(selectedAssignmentForView.Notes))
                {
                    <div class="mt-6">
                        <label class="block text-sm font-semibold text-gray-500 mb-2">Notas</label>
                        <p class="text-gray-900 bg-gray-50 p-4 rounded-lg">@selectedAssignmentForView.Notes</p>
                    </div>
                }
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end p-6 border-t border-gray-100">
                <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-semibold transition-all duration-200"
                        @onclick="CloseViewModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

<!-- Revoke Confirmation Modal -->
@if (showRevokeModal && selectedAssignmentForRevoke != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
            <!-- Modal Header -->
            <div class="p-6 border-b border-gray-100">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                        <i class="bi bi-exclamation-triangle text-red-600"></i>
                    </div>
                    <h2 class="text-xl font-bold text-gray-900">Confirmar Revocación</h2>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="p-6">
                <p class="text-gray-700 mb-4">
                    ¿Está seguro de que desea revocar la asignación del espacio <strong>@selectedAssignmentForRevoke.ParkingSpace?.SpaceNumber</strong> para <strong>@selectedAssignmentForRevoke.Client?.FullName</strong>?
                </p>
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div class="flex items-start space-x-2">
                        <i class="bi bi-exclamation-triangle text-yellow-600 mt-0.5"></i>
                        <div class="text-sm text-yellow-800">
                            <p class="font-semibold">Advertencia:</p>
                            <p>Esta acción cambiará el estado de la asignación a "Cancelado" y liberará el espacio de estacionamiento.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="flex justify-end space-x-3 p-6 border-t border-gray-100">
                <button class="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-200"
                        @onclick="CancelRevoke">
                    Cancelar
                </button>
                <button class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-200 flex items-center space-x-2"
                        @onclick="ConfirmRevoke" disabled="@isRevoking">
                    @if (isRevoking)
                    {
                        <div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    }
                    else
                    {
                        <i class="bi bi-x-circle"></i>
                    }
                    <span>Revocar</span>
                </button>
            </div>
        </div>
    </div>
}

<style>
    .animate-fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

@code {
    private List<ParkingAssignment>? assignments;
    private List<Client>? allClients;
    private List<Car>? clientCars;
    private List<ParkingSpace>? availableSpaces;
    private ParkingAssignment currentAssignment = new();
    private ParkingAssignment? selectedAssignmentForView;
    private ParkingAssignment? selectedAssignmentForRevoke;
    
    private string searchTerm = "";
    private string selectedClientId = "";
    private string selectedStatus = "";
    private DateTime? startDate;
    private DateTime? endDate;
    
    private bool showModal = false;
    private bool showViewModal = false;
    private bool showRevokeModal = false;
    private bool isEditing = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isRevoking = false;
    private bool showSuccessToast = false;
    private bool showErrorToast = false;
    private string successMessage = "";
    private string errorMessage = "";

    private int totalAssignments;
    private int activeAssignments;
    private int expiredAssignments;
    private int cancelledAssignments;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await SyncParkingSpaceAvailability(); // Sincronizar disponibilidad antes de cargar
        await LoadAvailableSpaces();
        await LoadAssignments();
        await LoadStatistics();
    }

    private async Task LoadClients()
    {
        allClients = await DbContext.Clients
            .Where(c => c.IsActive)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();
    }

    private async Task LoadAvailableSpaces()
    {
        // Cargar solo espacios que están activos Y disponibles
        // También incluir el espacio actual si estamos editando una asignación
        var query = DbContext.ParkingSpaces
            .Where(ps => ps.IsActive && ps.IsAvailable);

        // Si estamos editando, incluir también el espacio actualmente asignado
        if (isEditing && currentAssignment.ParkingSpaceId > 0)
        {
            query = DbContext.ParkingSpaces
                .Where(ps => ps.IsActive && (ps.IsAvailable || ps.Id == currentAssignment.ParkingSpaceId));
        }

        availableSpaces = await query
            .OrderBy(ps => ps.Zone)
            .ThenBy(ps => ps.SpaceNumber)
            .ToListAsync();
    }

    private async Task LoadStatistics()
    {
        totalAssignments = await DbContext.ParkingAssignments.CountAsync();
        activeAssignments = await DbContext.ParkingAssignments.CountAsync(pa => pa.Status == "Active" && pa.IsActive);
        expiredAssignments = await DbContext.ParkingAssignments.CountAsync(pa => pa.Status == "Expired");
        cancelledAssignments = await DbContext.ParkingAssignments.CountAsync(pa => pa.Status == "Cancelled");
    }

    private async Task LoadAssignments()
    {
        isLoading = true;
        try
        {
            var query = DbContext.ParkingAssignments
                .Include(pa => pa.Client)
                .Include(pa => pa.Car)
                .Include(pa => pa.ParkingSpace)
                .AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(pa => pa.Client!.FirstName.Contains(searchTerm) ||
                                         pa.Client!.LastName.Contains(searchTerm) ||
                                         pa.Car!.LicensePlate.Contains(searchTerm) ||
                                         pa.ParkingSpace!.SpaceNumber.Contains(searchTerm));
            }

            if (!string.IsNullOrEmpty(selectedClientId) && int.TryParse(selectedClientId, out int clientId))
            {
                query = query.Where(pa => pa.ClientId == clientId);
            }

            if (!string.IsNullOrEmpty(selectedStatus))
            {
                query = query.Where(pa => pa.Status == selectedStatus);
            }

            if (startDate.HasValue)
            {
                query = query.Where(pa => pa.AssignedDate >= startDate.Value);
            }

            if (endDate.HasValue)
            {
                query = query.Where(pa => pa.AssignedDate <= endDate.Value);
            }

            assignments = await query
                .OrderByDescending(pa => pa.AssignedDate)
                .ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterAssignments()
    {
        await LoadAssignments();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadAssignments();
        }
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        selectedClientId = "";
        selectedStatus = "";
        startDate = null;
        endDate = null;
        await LoadAssignments();
    }

    private async Task OnClientChangedEvent(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int clientId))
        {
            currentAssignment.ClientId = clientId;
            await OnClientChanged();
        }
    }

    private async Task OnClientChanged()
    {
        if (currentAssignment.ClientId > 0)
        {
            clientCars = await DbContext.Cars
                .Where(c => c.ClientId == currentAssignment.ClientId && c.IsActive)
                .OrderBy(c => c.LicensePlate)
                .ToListAsync();
        }
        else
        {
            clientCars = new List<Car>();
        }
        
        currentAssignment.CarId = 0; // Reset car selection
        StateHasChanged();
    }

    private void CancelCreate()
    {
        showModal = false;
        currentAssignment = new ParkingAssignment();
        clientCars = new List<Car>();
        StateHasChanged();
    }

    private async void ShowCreateModal()
    {
        currentAssignment = new ParkingAssignment
        {
            Status = "Active",
            IsActive = true,
            AssignedDate = DateTime.Now,
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddHours(2)
        };
        clientCars = new List<Car>();
        isEditing = false;

        // Recargar espacios disponibles
        await LoadAvailableSpaces();

        showModal = true;
        StateHasChanged();
    }

    private async void ShowEditModal(ParkingAssignment assignment)
    {
        currentAssignment = new ParkingAssignment

{
            Id = assignment.Id,
            ClientId = assignment.ClientId,
            CarId = assignment.CarId,
            ParkingSpaceId = assignment.ParkingSpaceId,
            StartDate = assignment.StartDate,
            EndDate = assignment.EndDate,
            Status = assignment.Status,
            Notes = assignment.Notes,
            IsActive = assignment.IsActive
        };

        isEditing = true;

        // Load cars for the selected client and available spaces
        await OnClientChanged();
        await LoadAvailableSpaces();

        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        currentAssignment = new();
        clientCars = new List<Car>();
    }

    private async Task SaveAssignment()
    {
        isSaving = true;
        try
        {
            // Validaciones básicas
            if (currentAssignment.ClientId <= 0)
            {
                errorMessage = "Debe seleccionar un cliente.";
                showErrorToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
                return;
            }

            if (currentAssignment.CarId <= 0)
            {
                errorMessage = "Debe seleccionar un vehículo.";
                showErrorToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
                return;
            }

            if (currentAssignment.ParkingSpaceId <= 0)
            {
                errorMessage = "Debe seleccionar un espacio de estacionamiento.";
                showErrorToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
                return;
            }

            // Verificar que el espacio esté disponible
            var conflictingAssignments = await DbContext.ParkingAssignments
                .Where(pa => pa.ParkingSpaceId == currentAssignment.ParkingSpaceId &&
                            pa.Status == "Active" && pa.IsActive &&
                            (!isEditing || pa.Id != currentAssignment.Id)) // Excluir la asignación actual si estamos editando
                .Include(pa => pa.Client)
                .Include(pa => pa.Car)
                .Include(pa => pa.ParkingSpace)
                .ToListAsync();

            if (conflictingAssignments.Any())
            {
                var conflictInfo = string.Join(", ", conflictingAssignments.Select(pa =>
                    $"ID:{pa.Id} - {pa.Client?.FullName} - {pa.Car?.LicensePlate} - Estado:{pa.Status} - Activo:{pa.IsActive}"));
                errorMessage = $"El espacio seleccionado ya está ocupado por: {conflictInfo}";
                showErrorToast = true;
                _ = Task.Delay(5000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
                return;
            }

            if (isEditing)
            {
                var existingAssignment = await DbContext.ParkingAssignments.FindAsync(currentAssignment.Id);
                if (existingAssignment != null)
                {
                    // Manejar cambios de espacio y estado
                    var oldSpaceId = existingAssignment.ParkingSpaceId;
                    var oldStatus = existingAssignment.Status;
                    var newSpaceId = currentAssignment.ParkingSpaceId;
                    var newStatus = currentAssignment.Status;

                    // Si se cambió el espacio
                    if (oldSpaceId != newSpaceId)
                    {
                        // Liberar el espacio anterior si la asignación anterior estaba activa
                        if (oldStatus == "Active")
                        {
                            var oldSpace = await DbContext.ParkingSpaces.FindAsync(oldSpaceId);
                            if (oldSpace != null)
                            {
                                oldSpace.IsAvailable = true;
                            }
                        }

                        // Ocupar el nuevo espacio si la nueva asignación está activa
                        if (newStatus == "Active")
                        {
                            var newSpace = await DbContext.ParkingSpaces.FindAsync(newSpaceId);
                            if (newSpace != null)
                            {
                                newSpace.IsAvailable = false;
                            }
                        }
                    }
                    // Si solo cambió el estado (mismo espacio)
                    else if (oldStatus != newStatus)
                    {
                        var space = await DbContext.ParkingSpaces.FindAsync(newSpaceId);
                        if (space != null)
                        {
                            // Si cambió de activo a inactivo, liberar el espacio
                            if (oldStatus == "Active" && newStatus != "Active")
                            {
                                space.IsAvailable = true;
                            }
                            // Si cambió de inactivo a activo, ocupar el espacio
                            else if (oldStatus != "Active" && newStatus == "Active")
                            {
                                space.IsAvailable = false;
                            }
                        }
                    }

                    existingAssignment.ClientId = currentAssignment.ClientId;
                    existingAssignment.CarId = currentAssignment.CarId;
                    existingAssignment.ParkingSpaceId = currentAssignment.ParkingSpaceId;
                    existingAssignment.StartDate = currentAssignment.StartDate;
                    existingAssignment.EndDate = currentAssignment.EndDate;
                    existingAssignment.Status = currentAssignment.Status;
                    existingAssignment.Notes = currentAssignment.Notes;
                    existingAssignment.ModifiedDate = DateTime.Now;
                }
            }
            else
            {
                // Asegurar que las fechas estén establecidas
                if (!currentAssignment.StartDate.HasValue)
                    currentAssignment.StartDate = DateTime.Now;
                if (!currentAssignment.EndDate.HasValue)
                    currentAssignment.EndDate = DateTime.Now.AddHours(2);

                currentAssignment.CreatedDate = DateTime.Now;
                DbContext.ParkingAssignments.Add(currentAssignment);
                
                // Marcar el espacio como ocupado
                var parkingSpace = await DbContext.ParkingSpaces.FindAsync(currentAssignment.ParkingSpaceId);
                if (parkingSpace != null)
                {
                    parkingSpace.IsAvailable = false;
                }
            }

            await DbContext.SaveChangesAsync();
            CloseModal();
            await LoadAssignments();
            await LoadStatistics();
            await LoadAvailableSpaces(); // Recargar espacios disponibles

            successMessage = isEditing ? "Asignación actualizada exitosamente." : "Asignación creada exitosamente.";
            showSuccessToast = true;
            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showSuccessToast = false; StateHasChanged(); }));
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.InnerException?.Message ?? ex.Message}";
            showErrorToast = true;
            _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ShowViewModal(ParkingAssignment assignment)
    {
        selectedAssignmentForView = assignment;
        showViewModal = true;
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        selectedAssignmentForView = null;
    }

    private void ShowRevokeConfirmation(ParkingAssignment assignment)
    {
        selectedAssignmentForRevoke = assignment;
        showRevokeModal = true;
    }

    private void CancelRevoke()
    {
        showRevokeModal = false;
        selectedAssignmentForRevoke = null;
    }

    private async Task ConfirmRevoke()
    {
        if (selectedAssignmentForRevoke != null)
        {
            isRevoking = true;
            try
            {
                selectedAssignmentForRevoke.Status = "Cancelled";
                selectedAssignmentForRevoke.IsActive = false;
                selectedAssignmentForRevoke.ModifiedDate = DateTime.Now;
                selectedAssignmentForRevoke.Notes = (selectedAssignmentForRevoke.Notes ?? "") + $"\nRevocado el {DateTime.Now:dd/MM/yyyy HH:mm}";

                // Liberar el espacio de estacionamiento
                var parkingSpace = await DbContext.ParkingSpaces.FindAsync(selectedAssignmentForRevoke.ParkingSpaceId);
                if (parkingSpace != null)
                {
                    parkingSpace.IsAvailable = true;
                }

                await DbContext.SaveChangesAsync();
                await LoadAssignments();
                await LoadStatistics();
                await LoadAvailableSpaces(); // Recargar espacios disponibles

                successMessage = "Asignación revocada exitosamente.";
                showSuccessToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showSuccessToast = false; StateHasChanged(); }));
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al revocar la asignación: {ex.Message}";
                showErrorToast = true;
                _ = Task.Delay(3000).ContinueWith(_ => InvokeAsync(() => { showErrorToast = false; StateHasChanged(); }));
            }
            finally
            {
                isRevoking = false;
                showRevokeModal = false;
                selectedAssignmentForRevoke = null;
            }
        }
    }

    private string GetStatusColorClasses(string status) => status switch
    {
        "Active" => "bg-green-100 text-green-800",
        "Expired" => "bg-orange-100 text-orange-800",
        "Cancelled" => "bg-red-100 text-red-800",
        "Suspended" => "bg-gray-100 text-gray-800",
        _ => "bg-blue-100 text-blue-800"
    };

    private string GetStatusIcon(string status) => status switch
    {
        "Active" => "check-circle",
        "Expired" => "clock",
        "Cancelled" => "x-circle",
        "Suspended" => "pause-circle",
        _ => "circle"
    };

    private string GetStatusText(string status) => status switch
    {
        "Active" => "Activo",
        "Expired" => "Expirado",
        "Cancelled" => "Cancelado",
        "Suspended" => "Suspendido",
        _ => status
    };

    private async Task SyncParkingSpaceAvailability()
    {
        try
        {
            // Obtener todos los espacios activos
            var allSpaces = await DbContext.ParkingSpaces
                .Where(ps => ps.IsActive)
                .ToListAsync();

            // Obtener todos los espacios que tienen asignaciones activas
            var occupiedSpaceIds = await DbContext.ParkingAssignments
                .Where(pa => pa.Status == "Active" && pa.IsActive)
                .Select(pa => pa.ParkingSpaceId)
                .Distinct()
                .ToListAsync();

            // Actualizar la disponibilidad de todos los espacios
            foreach (var space in allSpaces)
            {
                var shouldBeAvailable = !occupiedSpaceIds.Contains(space.Id);
                if (space.IsAvailable != shouldBeAvailable)
                {
                    space.IsAvailable = shouldBeAvailable;
                }
            }

            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            // En caso de error, continuar sin mostrar mensaje al usuario
            // ya que esto es una sincronización automática
        }
    }
}