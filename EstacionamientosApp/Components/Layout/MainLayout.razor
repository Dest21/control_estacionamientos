@inherits LayoutComponentBase
@using EstacionamientosApp.Components.Layout
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="min-h-screen bg-gray-50">
    <!-- Sidebar -->
    <div class="fixed inset-y-0 left-0 z-50 w-72 bg-gradient-to-b from-gray-900 to-gray-800 shadow-2xl transform transition-transform duration-300 ease-in-out lg:translate-x-0 -translate-x-full" id="sidebar">
        <NavMenu />
    </div>

    <!-- Main Content -->
    <div class="lg:pl-72">
        <!-- Top Navigation Bar -->
        <div class="sticky top-0 z-40 bg-white/80 backdrop-blur-lg border-b border-gray-200 shadow-sm">
            <div class="px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <!-- Left side -->
                    <div class="flex items-center">
                        <!-- Mobile menu button -->
                        <button type="button" 
                                class="lg:hidden p-2 rounded-lg text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-colors duration-200"
                                onclick="toggleSidebar()">
                            <i class="bi bi-list text-xl"></i>
                        </button>
                        
                        <div class="ml-4 lg:ml-0">
                            <h1 class="text-lg font-semibold text-gray-900">Sistema de Estacionamientos</h1>
                            <p class="text-sm text-gray-500">Panel de administración</p>
                        </div>
                    </div>

                    <!-- Right side -->
                    <div class="flex items-center space-x-4">
                        <!-- Notifications -->
                        <div class="relative">
                            <button class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors duration-200 relative">
                                <i class="bi bi-bell text-xl"></i>
                                <span class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">3</span>
                            </button>
                            
                            <!-- Notifications dropdown (hidden by default) -->
                            <div class="absolute right-0 mt-2 w-80 bg-white rounded-xl shadow-lg border border-gray-200 py-2 hidden" id="notifications-dropdown">
                                <div class="px-4 py-2 border-b border-gray-100">
                                    <h3 class="text-sm font-semibold text-gray-900">Notificaciones</h3>
                                </div>
                                <div class="max-h-64 overflow-y-auto">
                                    <a href="#" class="block px-4 py-3 hover:bg-gray-50 transition-colors duration-200">
                                        <div class="flex items-start">
                                            <div class="flex-shrink-0">
                                                <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                                    <i class="bi bi-info-circle text-blue-600 text-sm"></i>
                                                </div>
                                            </div>
                                            <div class="ml-3 flex-1">
                                                <p class="text-sm font-medium text-gray-900">Nuevo cliente registrado</p>
                                                <p class="text-xs text-gray-500">Hace 5 minutos</p>
                                            </div>
                                        </div>
                                    </a>
                                    <a href="#" class="block px-4 py-3 hover:bg-gray-50 transition-colors duration-200">
                                        <div class="flex items-start">
                                            <div class="flex-shrink-0">
                                                <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                                    <i class="bi bi-exclamation-triangle text-yellow-600 text-sm"></i>
                                                </div>
                                            </div>
                                            <div class="ml-3 flex-1">
                                                <p class="text-sm font-medium text-gray-900">Espacio próximo a vencer</p>
                                                <p class="text-xs text-gray-500">Hace 1 hora</p>
                                            </div>
                                        </div>
                                    </a>
                                    <a href="#" class="block px-4 py-3 hover:bg-gray-50 transition-colors duration-200">
                                        <div class="flex items-start">
                                            <div class="flex-shrink-0">
                                                <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                                    <i class="bi bi-check-circle text-green-600 text-sm"></i>
                                                </div>
                                            </div>
                                            <div class="ml-3 flex-1">
                                                <p class="text-sm font-medium text-gray-900">Pago procesado</p>
                                                <p class="text-xs text-gray-500">Hace 2 horas</p>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                                <div class="border-t border-gray-100 px-4 py-2">
                                    <a href="#" class="text-sm text-indigo-600 hover:text-indigo-800 font-medium">Ver todas las notificaciones</a>
                                </div>
                            </div>
                        </div>

                        <!-- User Menu -->
                        <div class="relative">
                            <button class="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200" onclick="toggleUserMenu()">
                                <div class="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center">
                                    <i class="bi bi-person-fill text-white text-sm"></i>
                                </div>
                                <div class="hidden sm:block text-left">
                                    <p class="text-sm font-medium text-gray-900">@currentFullName</p>
                                    <p class="text-xs text-gray-500">@currentUserRole</p>
                                </div>
                                <i class="bi bi-chevron-down text-gray-400 text-sm"></i>
                            </button>

                            <!-- User dropdown -->
                            <div class="absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-2 hidden" id="user-dropdown">
                                <div class="px-4 py-2 border-b border-gray-100">
                                    <p class="text-sm font-medium text-gray-900">@currentFullName</p>
                                    <p class="text-xs text-gray-500">@currentUserName</p>
                                </div>
                                <a href="#" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                                    <i class="bi bi-person mr-3 text-gray-400"></i>
                                    Mi Perfil
                                </a>
                                <a href="#" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                                    <i class="bi bi-gear mr-3 text-gray-400"></i>
                                    Configuración
                                </a>
                                <div class="border-t border-gray-100 my-1"></div>
                                <button @onclick="Logout" class="flex items-center w-full px-4 py-2 text-sm text-red-700 hover:bg-red-50 transition-colors duration-200">
                                    <i class="bi bi-box-arrow-right mr-3 text-red-400"></i>
                                    Cerrar Sesión
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Page Content -->
        <main class="py-6">
            <div class="px-4 sm:px-6 lg:px-8">
                @Body
            </div>
        </main>
    </div>
</div>

<!-- Mobile sidebar overlay -->
<div class="fixed inset-0 bg-gray-900 bg-opacity-50 z-40 lg:hidden hidden" id="sidebar-overlay" onclick="toggleSidebar()"></div>

<script>
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('sidebar-overlay');
        
        sidebar.classList.toggle('-translate-x-full');
        overlay.classList.toggle('hidden');
    }

    function toggleUserMenu() {
        const dropdown = document.getElementById('user-dropdown');
        dropdown.classList.toggle('hidden');
    }

    function toggleNotifications() {
        const dropdown = document.getElementById('notifications-dropdown');
        dropdown.classList.toggle('hidden');
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(event) {
        const userDropdown = document.getElementById('user-dropdown');
        const notificationsDropdown = document.getElementById('notifications-dropdown');
        
        if (!event.target.closest('.relative')) {
            userDropdown.classList.add('hidden');
            notificationsDropdown.classList.add('hidden');
        }
    });

    // Close sidebar on escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');
            
            if (!sidebar.classList.contains('-translate-x-full')) {
                sidebar.classList.add('-translate-x-full');
                overlay.classList.add('hidden');
            }
        }
    });
</script>

@code {
    private string currentUserName = "Admin";
    private string currentFullName = "Administrador";
    private string currentUserRole = "Administrador";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserInfo();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var username = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "username");
            var fullName = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "fullName");
            var userRole = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userRole");

            if (!string.IsNullOrEmpty(username))
            {
                currentUserName = username;
                currentFullName = fullName ?? username;
                currentUserRole = userRole ?? "Usuario";
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Error al cargar información del usuario
        }
    }

    private async Task Logout()
    {
        try
        {
            // Limpiar información de sesión
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "isAuthenticated");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userId");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "username");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "fullName");
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "userRole");

            // Redirigir al login
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception)
        {
            // Error al cerrar sesión, forzar redirección
            Navigation.NavigateTo("/login", true);
        }
    }
}
